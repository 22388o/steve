                A Peer-to-Peer Fault-Tolerant Language-Agnostic 
    Computation Dispatcher Over Pooled Self-Organizing Heterogenous Nodes
                                 (aka Steve)


  As part of the Distributed Systems course at the Rochester Institute of 
Technology, our group started work on Steve, the peer-to-peer computation 
dispatcher. Steve is based on the proposal for a system based on the general 
concept of distributed computation and meshnets to provide fault-tolerant 
computation for mobile and capability restricted devices. Steve consists of 
trusted but self-organizing nodes which maintain their own capability lists 
so that they can attempt computation requests or forward them on if unable. 

  In other words, say you don't have a C++ compiler on your smartphone, or you 
are running linux but want to test your code on a Windows 7 OS running python
version 2.7. Steve can help you out. Tell him what to find and he'll ask around.
When he find's a friend that is capable of doing what you asked he'll let you 
know and he'll pass on the program or code to run. When the friend gets back to
him he'll forward the report to you.

Features:
    - Fault-tolerant: Steve can have a lot of friends, and if more than one 
        friend can work on your code, then you can let them all have a go. Just 
        in case one is a no-show, the other's will still have your back. Also, 
        in case you are preoccupied, Steve and his friends have a great memory 
        and will let you know what the answer was when you next get a chance.

    - Language-Agnostic: Steve's friends don't all have to speak the same 
        language, as long as they all know how to look at a computation request.
        The request could be for a particular language, or even a particular 
        operating system.

    - Self-Organizing: Steve cares about the friends that do him favors. The 
        one's that don't or send him crap gifts, are dropped from his friends 
        list. In otherwords, Steve maintains a reputation system and will lower
        the reputation of friends that send him code that makes him crash or 
        don't return results that others do.

    - Heterogenous: Steve isn't expecting all friends to be able to do 
        everything, in fact, Steve counts on the fact that he's so connected 
        that he can get things done for you. In his network of friends, being
        unique and useful is a good thing.

Faults:

    - Trust: Steve only talks to his friends. He's clique'ish like that. To be
        a part of the group Steve will first ask your opinion of them before
        ever talking to them. Whitelist first, then rely on reputation later. 
        This can be a problem, especially if you wanted a dynamic friend-base.

    - Security: I'm sorry... Steve's a loud mouth. The only real security you 
        have in letting Steve do your dirty work, is that he'll let you tell him
        exactly how to do something. So if you want it sandboxed, he'll use that
        damn sandbox.

  From the feature and fault lists, you can decide if you want to give Steve a 
try. Check the Building and Deploying sections below. If you think you can 
change him, send us a pull request and we'll take a look at it. 


REQUIREMENTS:

  Steve only needs a few things to get started:
    
    - Erlang (minimum version R15B01)


BUILDING:

  There are two parts that need to be built, the Daemon service that runs in the
background, and the Client that you can use to connect and utilize the Daemon.
To build both and start working with them, make sure your system meets the 
requirements above and type:

    make all

This will compile both parts, then build a release directory 'rel'. It will also
make a couple useful scripts you can add to your path for starting/stoping the
Daemon and for launching the client.
 

DEPLOYING:

    ---TODO---


